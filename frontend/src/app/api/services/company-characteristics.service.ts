/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { companyCharacteristicsIdDelete } from '../fn/company-characteristics/company-characteristics-id-delete';
import { CompanyCharacteristicsIdDelete$Params } from '../fn/company-characteristics/company-characteristics-id-delete';
import { companyCharacteristicsIdPut } from '../fn/company-characteristics/company-characteristics-id-put';
import { CompanyCharacteristicsIdPut$Params } from '../fn/company-characteristics/company-characteristics-id-put';
import { companyCharacteristicsPost } from '../fn/company-characteristics/company-characteristics-post';
import { CompanyCharacteristicsPost$Params } from '../fn/company-characteristics/company-characteristics-post';

@Injectable({ providedIn: 'root' })
export class CompanyCharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `companyCharacteristicsPost()` */
  static readonly CompanyCharacteristicsPostPath = '/CompanyCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyCharacteristicsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyCharacteristicsPost$Response(params?: CompanyCharacteristicsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyCharacteristicsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyCharacteristicsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyCharacteristicsPost(params?: CompanyCharacteristicsPost$Params, context?: HttpContext): Observable<void> {
    return this.companyCharacteristicsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `companyCharacteristicsIdPut()` */
  static readonly CompanyCharacteristicsIdPutPath = '/CompanyCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyCharacteristicsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyCharacteristicsIdPut$Response(params: CompanyCharacteristicsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyCharacteristicsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyCharacteristicsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyCharacteristicsIdPut(params: CompanyCharacteristicsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.companyCharacteristicsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `companyCharacteristicsIdDelete()` */
  static readonly CompanyCharacteristicsIdDeletePath = '/CompanyCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyCharacteristicsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyCharacteristicsIdDelete$Response(params: CompanyCharacteristicsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyCharacteristicsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyCharacteristicsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyCharacteristicsIdDelete(params: CompanyCharacteristicsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.companyCharacteristicsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
