/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteCompanyCharacteristic } from '../fn/company-characteristics/delete-company-characteristic';
import { DeleteCompanyCharacteristic$Params } from '../fn/company-characteristics/delete-company-characteristic';
import { postCompanyCharacteristic } from '../fn/company-characteristics/post-company-characteristic';
import { PostCompanyCharacteristic$Params } from '../fn/company-characteristics/post-company-characteristic';
import { putCompanyCharacteristic } from '../fn/company-characteristics/put-company-characteristic';
import { PutCompanyCharacteristic$Params } from '../fn/company-characteristics/put-company-characteristic';

@Injectable({ providedIn: 'root' })
export class CompanyCharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `postCompanyCharacteristic()` */
  static readonly PostCompanyCharacteristicPath = '/CompanyCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postCompanyCharacteristic()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postCompanyCharacteristic$Response(params?: PostCompanyCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return postCompanyCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postCompanyCharacteristic$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postCompanyCharacteristic(params?: PostCompanyCharacteristic$Params, context?: HttpContext): Observable<void> {
    return this.postCompanyCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `putCompanyCharacteristic()` */
  static readonly PutCompanyCharacteristicPath = '/CompanyCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `putCompanyCharacteristic()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putCompanyCharacteristic$Response(params: PutCompanyCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return putCompanyCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `putCompanyCharacteristic$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putCompanyCharacteristic(params: PutCompanyCharacteristic$Params, context?: HttpContext): Observable<void> {
    return this.putCompanyCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteCompanyCharacteristic()` */
  static readonly DeleteCompanyCharacteristicPath = '/CompanyCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCompanyCharacteristic()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCompanyCharacteristic$Response(params: DeleteCompanyCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCompanyCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCompanyCharacteristic$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCompanyCharacteristic(params: DeleteCompanyCharacteristic$Params, context?: HttpContext): Observable<void> {
    return this.deleteCompanyCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
