/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { HistoricCurrencyCharacteristicReadDto } from '../models/historic-currency-characteristic-read-dto';
import { historicCurrencyCharacteristicsGet } from '../fn/historic-currency-characteristics/historic-currency-characteristics-get';
import { HistoricCurrencyCharacteristicsGet$Params } from '../fn/historic-currency-characteristics/historic-currency-characteristics-get';
import { historicCurrencyCharacteristicsIdDelete } from '../fn/historic-currency-characteristics/historic-currency-characteristics-id-delete';
import { HistoricCurrencyCharacteristicsIdDelete$Params } from '../fn/historic-currency-characteristics/historic-currency-characteristics-id-delete';
import { historicCurrencyCharacteristicsIdGet } from '../fn/historic-currency-characteristics/historic-currency-characteristics-id-get';
import { HistoricCurrencyCharacteristicsIdGet$Params } from '../fn/historic-currency-characteristics/historic-currency-characteristics-id-get';
import { historicCurrencyCharacteristicsIdPut } from '../fn/historic-currency-characteristics/historic-currency-characteristics-id-put';
import { HistoricCurrencyCharacteristicsIdPut$Params } from '../fn/historic-currency-characteristics/historic-currency-characteristics-id-put';
import { historicCurrencyCharacteristicsPost } from '../fn/historic-currency-characteristics/historic-currency-characteristics-post';
import { HistoricCurrencyCharacteristicsPost$Params } from '../fn/historic-currency-characteristics/historic-currency-characteristics-post';

@Injectable({ providedIn: 'root' })
export class HistoricCurrencyCharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `historicCurrencyCharacteristicsGet()` */
  static readonly HistoricCurrencyCharacteristicsGetPath = '/HistoricCurrencyCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `historicCurrencyCharacteristicsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  historicCurrencyCharacteristicsGet$Response(params?: HistoricCurrencyCharacteristicsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HistoricCurrencyCharacteristicReadDto>>> {
    return historicCurrencyCharacteristicsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `historicCurrencyCharacteristicsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  historicCurrencyCharacteristicsGet(params?: HistoricCurrencyCharacteristicsGet$Params, context?: HttpContext): Observable<Array<HistoricCurrencyCharacteristicReadDto>> {
    return this.historicCurrencyCharacteristicsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HistoricCurrencyCharacteristicReadDto>>): Array<HistoricCurrencyCharacteristicReadDto> => r.body)
    );
  }

  /** Path part for operation `historicCurrencyCharacteristicsPost()` */
  static readonly HistoricCurrencyCharacteristicsPostPath = '/HistoricCurrencyCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `historicCurrencyCharacteristicsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  historicCurrencyCharacteristicsPost$Response(params?: HistoricCurrencyCharacteristicsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<HistoricCurrencyCharacteristicReadDto>> {
    return historicCurrencyCharacteristicsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `historicCurrencyCharacteristicsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  historicCurrencyCharacteristicsPost(params?: HistoricCurrencyCharacteristicsPost$Params, context?: HttpContext): Observable<HistoricCurrencyCharacteristicReadDto> {
    return this.historicCurrencyCharacteristicsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<HistoricCurrencyCharacteristicReadDto>): HistoricCurrencyCharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `historicCurrencyCharacteristicsIdGet()` */
  static readonly HistoricCurrencyCharacteristicsIdGetPath = '/HistoricCurrencyCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `historicCurrencyCharacteristicsIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  historicCurrencyCharacteristicsIdGet$Response(params: HistoricCurrencyCharacteristicsIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<HistoricCurrencyCharacteristicReadDto>> {
    return historicCurrencyCharacteristicsIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `historicCurrencyCharacteristicsIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  historicCurrencyCharacteristicsIdGet(params: HistoricCurrencyCharacteristicsIdGet$Params, context?: HttpContext): Observable<HistoricCurrencyCharacteristicReadDto> {
    return this.historicCurrencyCharacteristicsIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<HistoricCurrencyCharacteristicReadDto>): HistoricCurrencyCharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `historicCurrencyCharacteristicsIdPut()` */
  static readonly HistoricCurrencyCharacteristicsIdPutPath = '/HistoricCurrencyCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `historicCurrencyCharacteristicsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  historicCurrencyCharacteristicsIdPut$Response(params: HistoricCurrencyCharacteristicsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return historicCurrencyCharacteristicsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `historicCurrencyCharacteristicsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  historicCurrencyCharacteristicsIdPut(params: HistoricCurrencyCharacteristicsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.historicCurrencyCharacteristicsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `historicCurrencyCharacteristicsIdDelete()` */
  static readonly HistoricCurrencyCharacteristicsIdDeletePath = '/HistoricCurrencyCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `historicCurrencyCharacteristicsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  historicCurrencyCharacteristicsIdDelete$Response(params: HistoricCurrencyCharacteristicsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return historicCurrencyCharacteristicsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `historicCurrencyCharacteristicsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  historicCurrencyCharacteristicsIdDelete(params: HistoricCurrencyCharacteristicsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.historicCurrencyCharacteristicsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
