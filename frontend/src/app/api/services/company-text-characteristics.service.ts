/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { companyTextCharacteristicsIdDelete } from '../fn/company-text-characteristics/company-text-characteristics-id-delete';
import { CompanyTextCharacteristicsIdDelete$Params } from '../fn/company-text-characteristics/company-text-characteristics-id-delete';
import { companyTextCharacteristicsIdPut } from '../fn/company-text-characteristics/company-text-characteristics-id-put';
import { CompanyTextCharacteristicsIdPut$Params } from '../fn/company-text-characteristics/company-text-characteristics-id-put';
import { companyTextCharacteristicsPost } from '../fn/company-text-characteristics/company-text-characteristics-post';
import { CompanyTextCharacteristicsPost$Params } from '../fn/company-text-characteristics/company-text-characteristics-post';

@Injectable({ providedIn: 'root' })
export class CompanyTextCharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `companyTextCharacteristicsPost()` */
  static readonly CompanyTextCharacteristicsPostPath = '/CompanyTextCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyTextCharacteristicsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyTextCharacteristicsPost$Response(params?: CompanyTextCharacteristicsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyTextCharacteristicsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyTextCharacteristicsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyTextCharacteristicsPost(params?: CompanyTextCharacteristicsPost$Params, context?: HttpContext): Observable<void> {
    return this.companyTextCharacteristicsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `companyTextCharacteristicsIdPut()` */
  static readonly CompanyTextCharacteristicsIdPutPath = '/CompanyTextCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyTextCharacteristicsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyTextCharacteristicsIdPut$Response(params: CompanyTextCharacteristicsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyTextCharacteristicsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyTextCharacteristicsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyTextCharacteristicsIdPut(params: CompanyTextCharacteristicsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.companyTextCharacteristicsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `companyTextCharacteristicsIdDelete()` */
  static readonly CompanyTextCharacteristicsIdDeletePath = '/CompanyTextCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyTextCharacteristicsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyTextCharacteristicsIdDelete$Response(params: CompanyTextCharacteristicsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyTextCharacteristicsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyTextCharacteristicsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyTextCharacteristicsIdDelete(params: CompanyTextCharacteristicsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.companyTextCharacteristicsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
