/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { companiesGet } from '../fn/companies/companies-get';
import { CompaniesGet$Params } from '../fn/companies/companies-get';
import { companiesIdDelete } from '../fn/companies/companies-id-delete';
import { CompaniesIdDelete$Params } from '../fn/companies/companies-id-delete';
import { companiesIdGet } from '../fn/companies/companies-id-get';
import { CompaniesIdGet$Params } from '../fn/companies/companies-id-get';
import { companiesIdPut } from '../fn/companies/companies-id-put';
import { CompaniesIdPut$Params } from '../fn/companies/companies-id-put';
import { companiesPost } from '../fn/companies/companies-post';
import { CompaniesPost$Params } from '../fn/companies/companies-post';
import { CompanyReadDto } from '../models/company-read-dto';

@Injectable({ providedIn: 'root' })
export class CompaniesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `companiesGet()` */
  static readonly CompaniesGetPath = '/Companies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companiesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  companiesGet$Response(params?: CompaniesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CompanyReadDto>>> {
    return companiesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companiesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companiesGet(params?: CompaniesGet$Params, context?: HttpContext): Observable<Array<CompanyReadDto>> {
    return this.companiesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CompanyReadDto>>): Array<CompanyReadDto> => r.body)
    );
  }

  /** Path part for operation `companiesPost()` */
  static readonly CompaniesPostPath = '/Companies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companiesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companiesPost$Response(params?: CompaniesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyReadDto>> {
    return companiesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companiesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companiesPost(params?: CompaniesPost$Params, context?: HttpContext): Observable<CompanyReadDto> {
    return this.companiesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyReadDto>): CompanyReadDto => r.body)
    );
  }

  /** Path part for operation `companiesIdGet()` */
  static readonly CompaniesIdGetPath = '/Companies/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companiesIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  companiesIdGet$Response(params: CompaniesIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyReadDto>> {
    return companiesIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companiesIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companiesIdGet(params: CompaniesIdGet$Params, context?: HttpContext): Observable<CompanyReadDto> {
    return this.companiesIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyReadDto>): CompanyReadDto => r.body)
    );
  }

  /** Path part for operation `companiesIdPut()` */
  static readonly CompaniesIdPutPath = '/Companies/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companiesIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companiesIdPut$Response(params: CompaniesIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyReadDto>> {
    return companiesIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companiesIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companiesIdPut(params: CompaniesIdPut$Params, context?: HttpContext): Observable<CompanyReadDto> {
    return this.companiesIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyReadDto>): CompanyReadDto => r.body)
    );
  }

  /** Path part for operation `companiesIdDelete()` */
  static readonly CompaniesIdDeletePath = '/Companies/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companiesIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  companiesIdDelete$Response(params: CompaniesIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companiesIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companiesIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companiesIdDelete(params: CompaniesIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.companiesIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
