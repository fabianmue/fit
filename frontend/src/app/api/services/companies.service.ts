/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CompanyReadDto } from '../models/company-read-dto';
import { deleteCompany } from '../fn/companies/delete-company';
import { DeleteCompany$Params } from '../fn/companies/delete-company';
import { getCompanies } from '../fn/companies/get-companies';
import { GetCompanies$Params } from '../fn/companies/get-companies';
import { getCompany } from '../fn/companies/get-company';
import { GetCompany$Params } from '../fn/companies/get-company';
import { postCompany } from '../fn/companies/post-company';
import { PostCompany$Params } from '../fn/companies/post-company';
import { putCompany } from '../fn/companies/put-company';
import { PutCompany$Params } from '../fn/companies/put-company';

@Injectable({ providedIn: 'root' })
export class CompaniesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCompanies()` */
  static readonly GetCompaniesPath = '/Companies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCompanies()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompanies$Response(params?: GetCompanies$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CompanyReadDto>>> {
    return getCompanies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCompanies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompanies(params?: GetCompanies$Params, context?: HttpContext): Observable<Array<CompanyReadDto>> {
    return this.getCompanies$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CompanyReadDto>>): Array<CompanyReadDto> => r.body)
    );
  }

  /** Path part for operation `postCompany()` */
  static readonly PostCompanyPath = '/Companies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postCompany()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postCompany$Response(params?: PostCompany$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyReadDto>> {
    return postCompany(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postCompany$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postCompany(params?: PostCompany$Params, context?: HttpContext): Observable<CompanyReadDto> {
    return this.postCompany$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyReadDto>): CompanyReadDto => r.body)
    );
  }

  /** Path part for operation `getCompany()` */
  static readonly GetCompanyPath = '/Companies/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCompany()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompany$Response(params: GetCompany$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyReadDto>> {
    return getCompany(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCompany$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompany(params: GetCompany$Params, context?: HttpContext): Observable<CompanyReadDto> {
    return this.getCompany$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyReadDto>): CompanyReadDto => r.body)
    );
  }

  /** Path part for operation `putCompany()` */
  static readonly PutCompanyPath = '/Companies/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `putCompany()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putCompany$Response(params: PutCompany$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return putCompany(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `putCompany$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putCompany(params: PutCompany$Params, context?: HttpContext): Observable<void> {
    return this.putCompany$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteCompany()` */
  static readonly DeleteCompanyPath = '/Companies/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCompany()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCompany$Response(params: DeleteCompany$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCompany(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCompany$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCompany(params: DeleteCompany$Params, context?: HttpContext): Observable<void> {
    return this.deleteCompany$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
