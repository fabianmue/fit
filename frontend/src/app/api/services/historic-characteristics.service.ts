/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteHistoricCharacteristic } from '../fn/historic-characteristics/delete-historic-characteristic';
import { DeleteHistoricCharacteristic$Params } from '../fn/historic-characteristics/delete-historic-characteristic';
import { getHistoricCharacteristic } from '../fn/historic-characteristics/get-historic-characteristic';
import { GetHistoricCharacteristic$Params } from '../fn/historic-characteristics/get-historic-characteristic';
import { getHistoricCharacteristics } from '../fn/historic-characteristics/get-historic-characteristics';
import { GetHistoricCharacteristics$Params } from '../fn/historic-characteristics/get-historic-characteristics';
import { HistoricCharacteristicReadDto } from '../models/historic-characteristic-read-dto';
import { postHistoricCharacteristic } from '../fn/historic-characteristics/post-historic-characteristic';
import { PostHistoricCharacteristic$Params } from '../fn/historic-characteristics/post-historic-characteristic';
import { putHistoricCharacteristic } from '../fn/historic-characteristics/put-historic-characteristic';
import { PutHistoricCharacteristic$Params } from '../fn/historic-characteristics/put-historic-characteristic';

@Injectable({ providedIn: 'root' })
export class HistoricCharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getHistoricCharacteristics()` */
  static readonly GetHistoricCharacteristicsPath = '/HistoricCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHistoricCharacteristics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoricCharacteristics$Response(params?: GetHistoricCharacteristics$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HistoricCharacteristicReadDto>>> {
    return getHistoricCharacteristics(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHistoricCharacteristics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoricCharacteristics(params?: GetHistoricCharacteristics$Params, context?: HttpContext): Observable<Array<HistoricCharacteristicReadDto>> {
    return this.getHistoricCharacteristics$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HistoricCharacteristicReadDto>>): Array<HistoricCharacteristicReadDto> => r.body)
    );
  }

  /** Path part for operation `postHistoricCharacteristic()` */
  static readonly PostHistoricCharacteristicPath = '/HistoricCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postHistoricCharacteristic()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postHistoricCharacteristic$Response(params?: PostHistoricCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<HistoricCharacteristicReadDto>> {
    return postHistoricCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postHistoricCharacteristic$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postHistoricCharacteristic(params?: PostHistoricCharacteristic$Params, context?: HttpContext): Observable<HistoricCharacteristicReadDto> {
    return this.postHistoricCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<HistoricCharacteristicReadDto>): HistoricCharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `getHistoricCharacteristic()` */
  static readonly GetHistoricCharacteristicPath = '/HistoricCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHistoricCharacteristic()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoricCharacteristic$Response(params: GetHistoricCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<HistoricCharacteristicReadDto>> {
    return getHistoricCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHistoricCharacteristic$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoricCharacteristic(params: GetHistoricCharacteristic$Params, context?: HttpContext): Observable<HistoricCharacteristicReadDto> {
    return this.getHistoricCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<HistoricCharacteristicReadDto>): HistoricCharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `putHistoricCharacteristic()` */
  static readonly PutHistoricCharacteristicPath = '/HistoricCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `putHistoricCharacteristic()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putHistoricCharacteristic$Response(params: PutHistoricCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return putHistoricCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `putHistoricCharacteristic$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putHistoricCharacteristic(params: PutHistoricCharacteristic$Params, context?: HttpContext): Observable<void> {
    return this.putHistoricCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteHistoricCharacteristic()` */
  static readonly DeleteHistoricCharacteristicPath = '/HistoricCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteHistoricCharacteristic()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteHistoricCharacteristic$Response(params: DeleteHistoricCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteHistoricCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteHistoricCharacteristic$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteHistoricCharacteristic(params: DeleteHistoricCharacteristic$Params, context?: HttpContext): Observable<void> {
    return this.deleteHistoricCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
