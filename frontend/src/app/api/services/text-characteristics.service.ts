/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { TextCharacteristicReadDto } from '../models/text-characteristic-read-dto';
import { textCharacteristicsGet } from '../fn/text-characteristics/text-characteristics-get';
import { TextCharacteristicsGet$Params } from '../fn/text-characteristics/text-characteristics-get';
import { textCharacteristicsIdDelete } from '../fn/text-characteristics/text-characteristics-id-delete';
import { TextCharacteristicsIdDelete$Params } from '../fn/text-characteristics/text-characteristics-id-delete';
import { textCharacteristicsIdGet } from '../fn/text-characteristics/text-characteristics-id-get';
import { TextCharacteristicsIdGet$Params } from '../fn/text-characteristics/text-characteristics-id-get';
import { textCharacteristicsIdPut } from '../fn/text-characteristics/text-characteristics-id-put';
import { TextCharacteristicsIdPut$Params } from '../fn/text-characteristics/text-characteristics-id-put';
import { textCharacteristicsPost } from '../fn/text-characteristics/text-characteristics-post';
import { TextCharacteristicsPost$Params } from '../fn/text-characteristics/text-characteristics-post';

@Injectable({ providedIn: 'root' })
export class TextCharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `textCharacteristicsGet()` */
  static readonly TextCharacteristicsGetPath = '/TextCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `textCharacteristicsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  textCharacteristicsGet$Response(params?: TextCharacteristicsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TextCharacteristicReadDto>>> {
    return textCharacteristicsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `textCharacteristicsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  textCharacteristicsGet(params?: TextCharacteristicsGet$Params, context?: HttpContext): Observable<Array<TextCharacteristicReadDto>> {
    return this.textCharacteristicsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TextCharacteristicReadDto>>): Array<TextCharacteristicReadDto> => r.body)
    );
  }

  /** Path part for operation `textCharacteristicsPost()` */
  static readonly TextCharacteristicsPostPath = '/TextCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `textCharacteristicsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  textCharacteristicsPost$Response(params?: TextCharacteristicsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TextCharacteristicReadDto>> {
    return textCharacteristicsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `textCharacteristicsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  textCharacteristicsPost(params?: TextCharacteristicsPost$Params, context?: HttpContext): Observable<TextCharacteristicReadDto> {
    return this.textCharacteristicsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TextCharacteristicReadDto>): TextCharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `textCharacteristicsIdGet()` */
  static readonly TextCharacteristicsIdGetPath = '/TextCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `textCharacteristicsIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  textCharacteristicsIdGet$Response(params: TextCharacteristicsIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<TextCharacteristicReadDto>> {
    return textCharacteristicsIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `textCharacteristicsIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  textCharacteristicsIdGet(params: TextCharacteristicsIdGet$Params, context?: HttpContext): Observable<TextCharacteristicReadDto> {
    return this.textCharacteristicsIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<TextCharacteristicReadDto>): TextCharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `textCharacteristicsIdPut()` */
  static readonly TextCharacteristicsIdPutPath = '/TextCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `textCharacteristicsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  textCharacteristicsIdPut$Response(params: TextCharacteristicsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return textCharacteristicsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `textCharacteristicsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  textCharacteristicsIdPut(params: TextCharacteristicsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.textCharacteristicsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `textCharacteristicsIdDelete()` */
  static readonly TextCharacteristicsIdDeletePath = '/TextCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `textCharacteristicsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  textCharacteristicsIdDelete$Response(params: TextCharacteristicsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return textCharacteristicsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `textCharacteristicsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  textCharacteristicsIdDelete(params: TextCharacteristicsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.textCharacteristicsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
