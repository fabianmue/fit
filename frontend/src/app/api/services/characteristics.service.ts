/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CharacteristicReadDto } from '../models/characteristic-read-dto';
import { deleteCharacteristic } from '../fn/characteristics/delete-characteristic';
import { DeleteCharacteristic$Params } from '../fn/characteristics/delete-characteristic';
import { getCharacteristic } from '../fn/characteristics/get-characteristic';
import { GetCharacteristic$Params } from '../fn/characteristics/get-characteristic';
import { getCharacteristics } from '../fn/characteristics/get-characteristics';
import { GetCharacteristics$Params } from '../fn/characteristics/get-characteristics';
import { postCharacteristic } from '../fn/characteristics/post-characteristic';
import { PostCharacteristic$Params } from '../fn/characteristics/post-characteristic';
import { putCharacteristic } from '../fn/characteristics/put-characteristic';
import { PutCharacteristic$Params } from '../fn/characteristics/put-characteristic';

@Injectable({ providedIn: 'root' })
export class CharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCharacteristics()` */
  static readonly GetCharacteristicsPath = '/Characteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCharacteristics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCharacteristics$Response(params?: GetCharacteristics$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CharacteristicReadDto>>> {
    return getCharacteristics(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCharacteristics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCharacteristics(params?: GetCharacteristics$Params, context?: HttpContext): Observable<Array<CharacteristicReadDto>> {
    return this.getCharacteristics$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CharacteristicReadDto>>): Array<CharacteristicReadDto> => r.body)
    );
  }

  /** Path part for operation `postCharacteristic()` */
  static readonly PostCharacteristicPath = '/Characteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postCharacteristic()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postCharacteristic$Response(params?: PostCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<CharacteristicReadDto>> {
    return postCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postCharacteristic$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postCharacteristic(params?: PostCharacteristic$Params, context?: HttpContext): Observable<CharacteristicReadDto> {
    return this.postCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<CharacteristicReadDto>): CharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `getCharacteristic()` */
  static readonly GetCharacteristicPath = '/Characteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCharacteristic()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCharacteristic$Response(params: GetCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<CharacteristicReadDto>> {
    return getCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCharacteristic$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCharacteristic(params: GetCharacteristic$Params, context?: HttpContext): Observable<CharacteristicReadDto> {
    return this.getCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<CharacteristicReadDto>): CharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `putCharacteristic()` */
  static readonly PutCharacteristicPath = '/Characteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `putCharacteristic()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putCharacteristic$Response(params: PutCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return putCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `putCharacteristic$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putCharacteristic(params: PutCharacteristic$Params, context?: HttpContext): Observable<void> {
    return this.putCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteCharacteristic()` */
  static readonly DeleteCharacteristicPath = '/Characteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCharacteristic()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCharacteristic$Response(params: DeleteCharacteristic$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCharacteristic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCharacteristic$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCharacteristic(params: DeleteCharacteristic$Params, context?: HttpContext): Observable<void> {
    return this.deleteCharacteristic$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
