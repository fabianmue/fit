/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CharacteristicReadDto } from '../models/characteristic-read-dto';
import { characteristicsGet } from '../fn/characteristics/characteristics-get';
import { CharacteristicsGet$Params } from '../fn/characteristics/characteristics-get';
import { characteristicsIdDelete } from '../fn/characteristics/characteristics-id-delete';
import { CharacteristicsIdDelete$Params } from '../fn/characteristics/characteristics-id-delete';
import { characteristicsIdGet } from '../fn/characteristics/characteristics-id-get';
import { CharacteristicsIdGet$Params } from '../fn/characteristics/characteristics-id-get';
import { characteristicsIdPut } from '../fn/characteristics/characteristics-id-put';
import { CharacteristicsIdPut$Params } from '../fn/characteristics/characteristics-id-put';
import { characteristicsPost } from '../fn/characteristics/characteristics-post';
import { CharacteristicsPost$Params } from '../fn/characteristics/characteristics-post';

@Injectable({ providedIn: 'root' })
export class CharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `characteristicsGet()` */
  static readonly CharacteristicsGetPath = '/Characteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `characteristicsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  characteristicsGet$Response(params?: CharacteristicsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CharacteristicReadDto>>> {
    return characteristicsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `characteristicsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  characteristicsGet(params?: CharacteristicsGet$Params, context?: HttpContext): Observable<Array<CharacteristicReadDto>> {
    return this.characteristicsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CharacteristicReadDto>>): Array<CharacteristicReadDto> => r.body)
    );
  }

  /** Path part for operation `characteristicsPost()` */
  static readonly CharacteristicsPostPath = '/Characteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `characteristicsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  characteristicsPost$Response(params?: CharacteristicsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<CharacteristicReadDto>> {
    return characteristicsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `characteristicsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  characteristicsPost(params?: CharacteristicsPost$Params, context?: HttpContext): Observable<CharacteristicReadDto> {
    return this.characteristicsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<CharacteristicReadDto>): CharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `characteristicsIdGet()` */
  static readonly CharacteristicsIdGetPath = '/Characteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `characteristicsIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  characteristicsIdGet$Response(params: CharacteristicsIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<CharacteristicReadDto>> {
    return characteristicsIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `characteristicsIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  characteristicsIdGet(params: CharacteristicsIdGet$Params, context?: HttpContext): Observable<CharacteristicReadDto> {
    return this.characteristicsIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<CharacteristicReadDto>): CharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `characteristicsIdPut()` */
  static readonly CharacteristicsIdPutPath = '/Characteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `characteristicsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  characteristicsIdPut$Response(params: CharacteristicsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return characteristicsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `characteristicsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  characteristicsIdPut(params: CharacteristicsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.characteristicsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `characteristicsIdDelete()` */
  static readonly CharacteristicsIdDeletePath = '/Characteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `characteristicsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  characteristicsIdDelete$Response(params: CharacteristicsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return characteristicsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `characteristicsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  characteristicsIdDelete(params: CharacteristicsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.characteristicsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
