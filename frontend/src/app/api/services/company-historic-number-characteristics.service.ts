/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CompanyHistoricNumberCharacteristicReadDto } from '../models/company-historic-number-characteristic-read-dto';
import { companyHistoricNumberCharacteristicsIdDelete } from '../fn/company-historic-number-characteristics/company-historic-number-characteristics-id-delete';
import { CompanyHistoricNumberCharacteristicsIdDelete$Params } from '../fn/company-historic-number-characteristics/company-historic-number-characteristics-id-delete';
import { companyHistoricNumberCharacteristicsIdPut } from '../fn/company-historic-number-characteristics/company-historic-number-characteristics-id-put';
import { CompanyHistoricNumberCharacteristicsIdPut$Params } from '../fn/company-historic-number-characteristics/company-historic-number-characteristics-id-put';
import { companyHistoricNumberCharacteristicsPost } from '../fn/company-historic-number-characteristics/company-historic-number-characteristics-post';
import { CompanyHistoricNumberCharacteristicsPost$Params } from '../fn/company-historic-number-characteristics/company-historic-number-characteristics-post';

@Injectable({ providedIn: 'root' })
export class CompanyHistoricNumberCharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `companyHistoricNumberCharacteristicsPost()` */
  static readonly CompanyHistoricNumberCharacteristicsPostPath = '/CompanyHistoricNumberCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyHistoricNumberCharacteristicsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricNumberCharacteristicsPost$Response(params?: CompanyHistoricNumberCharacteristicsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyHistoricNumberCharacteristicReadDto>> {
    return companyHistoricNumberCharacteristicsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyHistoricNumberCharacteristicsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricNumberCharacteristicsPost(params?: CompanyHistoricNumberCharacteristicsPost$Params, context?: HttpContext): Observable<CompanyHistoricNumberCharacteristicReadDto> {
    return this.companyHistoricNumberCharacteristicsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyHistoricNumberCharacteristicReadDto>): CompanyHistoricNumberCharacteristicReadDto => r.body)
    );
  }

  /** Path part for operation `companyHistoricNumberCharacteristicsIdPut()` */
  static readonly CompanyHistoricNumberCharacteristicsIdPutPath = '/CompanyHistoricNumberCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyHistoricNumberCharacteristicsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricNumberCharacteristicsIdPut$Response(params: CompanyHistoricNumberCharacteristicsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyHistoricNumberCharacteristicsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyHistoricNumberCharacteristicsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricNumberCharacteristicsIdPut(params: CompanyHistoricNumberCharacteristicsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.companyHistoricNumberCharacteristicsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `companyHistoricNumberCharacteristicsIdDelete()` */
  static readonly CompanyHistoricNumberCharacteristicsIdDeletePath = '/CompanyHistoricNumberCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyHistoricNumberCharacteristicsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyHistoricNumberCharacteristicsIdDelete$Response(params: CompanyHistoricNumberCharacteristicsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyHistoricNumberCharacteristicsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyHistoricNumberCharacteristicsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyHistoricNumberCharacteristicsIdDelete(params: CompanyHistoricNumberCharacteristicsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.companyHistoricNumberCharacteristicsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
