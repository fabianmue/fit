/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { companyHistoricFinancialCharacteristicsIdDelete } from '../fn/company-historic-financial-characteristics/company-historic-financial-characteristics-id-delete';
import { CompanyHistoricFinancialCharacteristicsIdDelete$Params } from '../fn/company-historic-financial-characteristics/company-historic-financial-characteristics-id-delete';
import { companyHistoricFinancialCharacteristicsIdPut } from '../fn/company-historic-financial-characteristics/company-historic-financial-characteristics-id-put';
import { CompanyHistoricFinancialCharacteristicsIdPut$Params } from '../fn/company-historic-financial-characteristics/company-historic-financial-characteristics-id-put';
import { companyHistoricFinancialCharacteristicsPost } from '../fn/company-historic-financial-characteristics/company-historic-financial-characteristics-post';
import { CompanyHistoricFinancialCharacteristicsPost$Params } from '../fn/company-historic-financial-characteristics/company-historic-financial-characteristics-post';

@Injectable({ providedIn: 'root' })
export class CompanyHistoricFinancialCharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `companyHistoricFinancialCharacteristicsPost()` */
  static readonly CompanyHistoricFinancialCharacteristicsPostPath = '/CompanyHistoricFinancialCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyHistoricFinancialCharacteristicsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricFinancialCharacteristicsPost$Response(params?: CompanyHistoricFinancialCharacteristicsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyHistoricFinancialCharacteristicsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyHistoricFinancialCharacteristicsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricFinancialCharacteristicsPost(params?: CompanyHistoricFinancialCharacteristicsPost$Params, context?: HttpContext): Observable<void> {
    return this.companyHistoricFinancialCharacteristicsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `companyHistoricFinancialCharacteristicsIdPut()` */
  static readonly CompanyHistoricFinancialCharacteristicsIdPutPath = '/CompanyHistoricFinancialCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyHistoricFinancialCharacteristicsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricFinancialCharacteristicsIdPut$Response(params: CompanyHistoricFinancialCharacteristicsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyHistoricFinancialCharacteristicsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyHistoricFinancialCharacteristicsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricFinancialCharacteristicsIdPut(params: CompanyHistoricFinancialCharacteristicsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.companyHistoricFinancialCharacteristicsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `companyHistoricFinancialCharacteristicsIdDelete()` */
  static readonly CompanyHistoricFinancialCharacteristicsIdDeletePath = '/CompanyHistoricFinancialCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyHistoricFinancialCharacteristicsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyHistoricFinancialCharacteristicsIdDelete$Response(params: CompanyHistoricFinancialCharacteristicsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyHistoricFinancialCharacteristicsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyHistoricFinancialCharacteristicsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyHistoricFinancialCharacteristicsIdDelete(params: CompanyHistoricFinancialCharacteristicsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.companyHistoricFinancialCharacteristicsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
