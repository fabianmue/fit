/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { companyHistoricCurrencyCharacteristicsIdDelete } from '../fn/company-historic-currency-characteristics/company-historic-currency-characteristics-id-delete';
import { CompanyHistoricCurrencyCharacteristicsIdDelete$Params } from '../fn/company-historic-currency-characteristics/company-historic-currency-characteristics-id-delete';
import { companyHistoricCurrencyCharacteristicsIdPut } from '../fn/company-historic-currency-characteristics/company-historic-currency-characteristics-id-put';
import { CompanyHistoricCurrencyCharacteristicsIdPut$Params } from '../fn/company-historic-currency-characteristics/company-historic-currency-characteristics-id-put';
import { companyHistoricCurrencyCharacteristicsPost } from '../fn/company-historic-currency-characteristics/company-historic-currency-characteristics-post';
import { CompanyHistoricCurrencyCharacteristicsPost$Params } from '../fn/company-historic-currency-characteristics/company-historic-currency-characteristics-post';

@Injectable({ providedIn: 'root' })
export class CompanyHistoricCurrencyCharacteristicsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `companyHistoricCurrencyCharacteristicsPost()` */
  static readonly CompanyHistoricCurrencyCharacteristicsPostPath = '/CompanyHistoricCurrencyCharacteristics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyHistoricCurrencyCharacteristicsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricCurrencyCharacteristicsPost$Response(params?: CompanyHistoricCurrencyCharacteristicsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyHistoricCurrencyCharacteristicsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyHistoricCurrencyCharacteristicsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricCurrencyCharacteristicsPost(params?: CompanyHistoricCurrencyCharacteristicsPost$Params, context?: HttpContext): Observable<void> {
    return this.companyHistoricCurrencyCharacteristicsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `companyHistoricCurrencyCharacteristicsIdPut()` */
  static readonly CompanyHistoricCurrencyCharacteristicsIdPutPath = '/CompanyHistoricCurrencyCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyHistoricCurrencyCharacteristicsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricCurrencyCharacteristicsIdPut$Response(params: CompanyHistoricCurrencyCharacteristicsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyHistoricCurrencyCharacteristicsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyHistoricCurrencyCharacteristicsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyHistoricCurrencyCharacteristicsIdPut(params: CompanyHistoricCurrencyCharacteristicsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.companyHistoricCurrencyCharacteristicsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `companyHistoricCurrencyCharacteristicsIdDelete()` */
  static readonly CompanyHistoricCurrencyCharacteristicsIdDeletePath = '/CompanyHistoricCurrencyCharacteristics/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyHistoricCurrencyCharacteristicsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyHistoricCurrencyCharacteristicsIdDelete$Response(params: CompanyHistoricCurrencyCharacteristicsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyHistoricCurrencyCharacteristicsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyHistoricCurrencyCharacteristicsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyHistoricCurrencyCharacteristicsIdDelete(params: CompanyHistoricCurrencyCharacteristicsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.companyHistoricCurrencyCharacteristicsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
