// <auto-generated />
using System;
using FitBackend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitBackend.Migrations
{
    [DbContext(typeof(FitBackendContext))]
    [Migration("20250315184312_HistoricCharacteristics")]
    partial class HistoricCharacteristics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitBackend.Characteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("FitBackend.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("FitBackend.CompanyCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyCharacteristics");
                });

            modelBuilder.Entity("FitBackend.CompanyHistoricCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HistoricCharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("HistoricCharacteristicId");

                    b.ToTable("CompanyHistoricCharacteristics");
                });

            modelBuilder.Entity("FitBackend.HistoricCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HistoricCharacteristics");
                });

            modelBuilder.Entity("FitBackend.HistoricValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyHistoricCharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CompanyHistoricCharacteristicId");

                    b.ToTable("HistoricValues");
                });

            modelBuilder.Entity("FitBackend.CompanyCharacteristic", b =>
                {
                    b.HasOne("FitBackend.Characteristic", "Characteristic")
                        .WithMany("CompanyCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitBackend.Company", "Company")
                        .WithMany("CompanyCharacteristics")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FitBackend.CompanyHistoricCharacteristic", b =>
                {
                    b.HasOne("FitBackend.Company", "Company")
                        .WithMany("CompanyHistoricCharacteristics")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitBackend.HistoricCharacteristic", "HistoricCharacteristic")
                        .WithMany("CompanyHistoricCharacteristics")
                        .HasForeignKey("HistoricCharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("HistoricCharacteristic");
                });

            modelBuilder.Entity("FitBackend.HistoricValue", b =>
                {
                    b.HasOne("FitBackend.CompanyHistoricCharacteristic", "CompanyHistoricCharacteristic")
                        .WithMany("Values")
                        .HasForeignKey("CompanyHistoricCharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyHistoricCharacteristic");
                });

            modelBuilder.Entity("FitBackend.Characteristic", b =>
                {
                    b.Navigation("CompanyCharacteristics");
                });

            modelBuilder.Entity("FitBackend.Company", b =>
                {
                    b.Navigation("CompanyCharacteristics");

                    b.Navigation("CompanyHistoricCharacteristics");
                });

            modelBuilder.Entity("FitBackend.CompanyHistoricCharacteristic", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("FitBackend.HistoricCharacteristic", b =>
                {
                    b.Navigation("CompanyHistoricCharacteristics");
                });
#pragma warning restore 612, 618
        }
    }
}
